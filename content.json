{"meta":{"title":"sunny|博客","subtitle":"个人网站","description":null,"author":"sunny","url":"http://yoursite.com"},"pages":[{"title":"categories","date":"2017-11-07T13:33:49.000Z","updated":"2017-11-07T13:33:49.795Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2017-11-07T13:37:10.000Z","updated":"2017-11-07T13:37:10.690Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Hello World","slug":"hello-world","date":"2017-11-07T09:24:10.403Z","updated":"2017-11-07T09:24:10.403Z","comments":true,"path":"2017/11/07/hello-world/","link":"","permalink":"http://yoursite.com/2017/11/07/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]},{"title":"idea启动优化","slug":"idea启动优化","date":"2017-06-27T06:26:14.000Z","updated":"2017-07-11T06:33:35.676Z","comments":true,"path":"2017/06/27/idea启动优化/","link":"","permalink":"http://yoursite.com/2017/06/27/idea启动优化/","excerpt":"","text":"&nbsp;&nbsp;&nbsp;IDEA 全称IntelliJ IDEA，是java语言开发的集成环境，IntelliJ在业界被公认为最好的java开发工具之一，尤其在智能代码助手、代码自动提示、重构、J2EE支持、Ant、JUnit、CVS整合、代码审查、 创新的GUI设计等方面的功能可以说是超常的。IDEA是JetBrains公司的产品，这家公司总部位于捷克共和国的首都布拉格，开发人员以严谨著称的东欧程序员为主。 JVM 参数优化进入idea安装目录的bin目录下，修改 idea.exe.vmoptions 配置文件内容如下：12345678910111213141516171819-Xms384m-Xms512m-Xmx750m-Xmn264m-XX:MaxPermSize=350m-XX:PermSize=128m-XX:ReservedCodeCacheSize=240m-Xverify:none-Xnoclassgc-XX:+UseParNewGC-XX:+UseConcMarkSweepGC-XX:SoftRefLRUPolicyMSPerMB=50-ea-server-Dsun.io.useCanonCaches=false-Dsun.awt.keepWorkingSetOnMinimize=true-Djava.net.preferIPv4Stack=true-XX:+HeapDumpOnOutOfMemoryError-XX:-OmitStackTraceInFastThrow 注: -Xms512m 设置初时的内存大小，提高Java程序的启动速度 -Xm750m 设置最大内存数，提高该值，可以减少内存Garage收集的频率，提高程序性能 -Xverify:none 关闭Java字节码验证，从而加快了类装入的速度，并使得在仅为验证目的而启动的过程中无需装入类，缩短了启动时间 -XX:+UseParNewGC 使用并行收集算法 -server 控制内存garage方式，这样你无需在花一到两分钟等待内存garage的收集 -Dsun.awt.keepWorkingSetOnMinimize=true可以让IDEA最小化到任务栏时依然保持以占有的内存，当你重新回到IDEA，能够被快速显示，而不是由灰白的界面逐渐显现整个界面，加快回复到原界面的速度。 idea.properties 文件修改 进入idea安装目录的bin目录下，修改 idea.properties,这个文件默认是存放的配置是在C盘的，用的时间久了文件会越来越大 12345678910111213141516171819#---------------------------------------------------------------------# 我是放在跟我软件平级的目录#--------------------------------------------------------------------- idea.config.path=H:/IDE/IntelliJ IDEA/.IntelliJIdea/config#---------------------------------------------------------------------# Uncomment this option if you want to customize path to IDE system folder. Make sure you&apos;re using forward slashes.#---------------------------------------------------------------------idea.system.path=H:/IDE/IntelliJ IDEA/.IntelliJIdea/system#---------------------------------------------------------------------# Uncomment this option if you want to customize path to user installed plugins folder. Make sure you&apos;re using forward slashes.#---------------------------------------------------------------------idea.plugins.path=$&#123;idea.system.path&#125;/plugins#---------------------------------------------------------------------# Uncomment this option if you want to customize path to IDE logs folder. Make sure you&apos;re using forward slashes.#---------------------------------------------------------------------idea.log.path=$&#123;idea.system.path&#125;/log 完事，继续敲代码去了。","categories":[{"name":"idea","slug":"idea","permalink":"http://yoursite.com/categories/idea/"}],"tags":[{"name":"idea","slug":"idea","permalink":"http://yoursite.com/tags/idea/"},{"name":"软件","slug":"软件","permalink":"http://yoursite.com/tags/软件/"}]},{"title":"Git常用命令","slug":"git命令使用","date":"2015-06-19T06:12:35.000Z","updated":"2017-06-27T06:58:26.253Z","comments":true,"path":"2015/06/19/git命令使用/","link":"","permalink":"http://yoursite.com/2015/06/19/git命令使用/","excerpt":"","text":"查看、添加、提交、删除、找回，重置修改文件 git help &lt;command&gt; 显示command的help git show 显示某次提交的内容 git show $id git co -- 抛弃工作区修改 git co . 抛弃工作区修改 git add &lt;file&gt; 将工作文件修改提交到本地暂存区 git add . 将所有修改过的工作文件提交暂存区,注意有一个点的,添加单个文件就把点换成文件名称 git rm &lt;file&gt; 从版本库中删除文件 git rm &lt;file&gt; --cached 从版本库中删除文件，但不删除文件 git reset &lt;file&gt; 从暂存区恢复到工作文件 git reset -- . 从暂存区恢复到工作文件 git reset --hard 恢复最近一次提交过的状态，即放弃上次提交后的所有本次修改 git ci &lt;file&gt; git ci . git ci -a 将git add, git rm和git ci等操作都合并在一起做 git ci -am “some comments” git ci --amend 修改最后一次提交记录 git revert &lt;$id&gt; 恢复某次提交的状态，恢复动作本身也创建次提交对象 git revert HEAD 恢复最后一次提交的状态 查看文件diff git diff &lt;file&gt; 比较当前文件和暂存区文件差异 git diff git diff &lt;id1&gt;&lt;id1&gt;&lt;id2&gt; 比较两次提交之间的差异 git diff &lt;branch1&gt;..&lt;branch2&gt; 在两个分支之间比较 git diff --staged 比较暂存区和版本库差异 git diff --cached 比较暂存区和版本库差异 git diff --stat 仅仅比较统计信息 查看提交记录 git log git log &lt;file&gt; 查看该文件每次提交记录 git log -p &lt;file&gt; 查看每次详细修改内容的diff git log -p -2 查看最近两次详细修改内容的diff git log --stat 查看提交统计信息 tig Mac上可以使用tig代替diff和log，brew install tig Git 本地分支管理查看、切换、创建和删除分支 git br -r 查看远程分支 git br &lt;new_branch&gt; 创建新的分支 git br -v 查看各个分支最后提交信息 git br --merged 查看已经被合并到当前分支的分支 git br --no-merged 查看尚未被合并到当前分支的分支 git co &lt;branch&gt; 切换到某个分支 git co -b &lt;new_branch&gt; 创建新的分支，并且切换过去 git co -b &lt;new_branch&gt; &lt;branch&gt; 基于branch创建新的new_branch git co $id 把某次历史提交记录checkout出来，但无分支信息，切换到其他分支会自动删除 git co $id -b &lt;new_branch&gt; 把某次历史提交记录checkout出来，创建成一个分支 git br -d &lt;branch&gt; 删除某个分支 git br -D &lt;branch&gt; 强制删除某个分支 (未被合并的分支被删除的时候需要强制) 分支合并和rebase git merge &lt;branch&gt; 将branch分支合并到当前分支 git merge origin/master --no-ff 不要Fast-Foward合并，这样可以生成merge提交 git rebase master &lt;branch&gt; 将master rebase到branch，相当于： git co &amp;&amp; git rebase master &amp;&amp; git co master &amp;&amp; git merge Git补丁管理(方便在多台机器上开发同步时用) git diff &gt; ../sync.patch 生成补丁 git apply ../sync.patch 打补丁 git apply --check ../sync.patch 测试补丁能否成功 Git暂存管理 git stash 暂存 git stash list 列所有stash git stash apply 恢复暂存的内容 git stash drop 删除暂存区 Git远程分支管理 git pull # 抓取远程仓库所有分支更新并合并到本地 git pull --no-ff 抓取远程仓库所有分支更新并合并到本地，不要快进合并 git fetch origin 抓取远程仓库更新 git merge origin/master 将远程主分支合并到本地当前分支 git co --track origin/branch 跟踪某个远程分支创建相应的本地分支 git co -b &lt;local_branch&gt; origin/&lt;remote_branch&gt; 基于远程分支创建本地分支，功能同上 git push push所有分支 git push origin master 将本地主分支推到远程主分支 git push -u origin master 将本地主分支推到远程(如无远程主分支则创建，用于初始化远程仓库) git push origin &lt;local_branch&gt; 创建远程分支， origin是远程仓库名 git push origin &lt;local_branch&gt;:&lt;remote_branch&gt; 创建远程分支 git push origin :&lt;remote_branch&gt; 先删除本地分支(git br -d )，然后再push删除远程分支 Git远程仓库管理GitHub git remote -v 查看远程服务器地址和仓库名称 git remote show origin 查看远程服务器仓库状态 git remote add origin git@ github:robbin/robbin_site.git 添加远程仓库地址 git remote set-url origin git@ github.com:robbin/robbin_site.git 设置远程仓库地址(用于修改远程仓库地址) git remote rm # 删除远程仓库 创建远程仓库 git clone --bare robbin_site robbin_site.git 用带版本的项目创建纯版本仓库 scp -r my_project.git git@ git.csdn.net:~ 将纯仓库上传到服务器上 mkdir robbin_site.git &amp;&amp; cd robbin_site.git &amp;&amp; git --bare init 在服务器创建纯仓库 git remote add origin git@ github.com:robbin/robbin_site.git 设置远程仓库地址 git push -u origin master 客户端首次提交 git push -u origin develop 首次将本地develop分支提交到远程develop分支，并且track git remote set-head origin master 设置远程仓库的HEAD指向master分支 也可以命令设置跟踪远程库和本地库 git branch --set-upstream master origin/master git branch --set-upstream develop origin/develop","categories":[{"name":"git","slug":"git","permalink":"http://yoursite.com/categories/git/"}],"tags":[{"name":"git","slug":"git","permalink":"http://yoursite.com/tags/git/"}]}]}